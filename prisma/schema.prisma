// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Win {
  id          Int       @id @default(autoincrement())
  title       String?
  description String?
  imageUrl    String    @map("image_url") @db.VarChar(3000)
  likeCount   Int       @default(0) @map("like_count")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")

  tag     TagOnWin[]
  winLike WinLike[]
  comment Comment[]
  Board   BoardOnWin[]

  @@map("win")
}

model User {
  id            Int       @id @default(autoincrement())
  userNumber    String    @unique @map("user_number")
  email         String?
  password      String?
  name          String
  snsId         String?   @map("sns_id")
  followerCount Int       @default(0) @map("follower_count")
  connectedAt   DateTime? @map("connected_at")
  verifiedAt    DateTime? @map("verified_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime? @map("updated_at")

  win         Win[]
  interest    Interest[]
  winLike     WinLike[]
  comment     Comment[]
  commentLike CommentLike[]
  followerBy  Follow[]      @relation("follower")
  following   Follow[]      @relation("following")
  Board       Board[]

  @@map("user")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")

  win      TagOnWin[]
  interest Interest[]

  @@map("tag")
}

model TagOnWin {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  Tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int       @map("tag_id")
  Win       Win       @relation(fields: [winId], references: [id], onDelete: Cascade)
  winId     Int       @map("win_id")

  @@map("tag_and_win")
}

model Interest {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  User      User      @relation(fields: [userId], references: [id])
  userId    Int       @map("user_id")
  Tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int       @map("tag_id")

  @@map("interest")
}

model WinLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")
  Win       Win      @relation(fields: [winId], references: [id], onDelete: Cascade)
  winId     Int      @map("win_id")

  @@map("win_like")
}

model Comment {
  id          Int       @id @default(autoincrement())
  parent      Comment?  @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)
  predecessor Comment[] @relation("parent")
  parentId    Int?      @map("parent_id")
  content     String
  likeCount   Int       @default(0) @map("like_count")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int       @map("user_id")
  Win         Win       @relation(fields: [winId], references: [id], onDelete: Cascade)
  winId       Int       @map("win_id")

  commentLike CommentLike[]

  @@map("comment")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  Comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int      @map("comment_id")
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @map("user_id")

  @@map("comment_like")
}

model Follow {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  follower    User     @relation("follower", fields: [followerId], references: [id])
  followerId  Int      @map("follower_id")
  following   User     @relation("following", fields: [followingId], references: [id])
  followingId Int      @map("following_id")

  @@map("follow")
}

model Board {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  User      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int       @map("user_id")

  win BoardOnWin[]

  @@map("board")
}

model BoardOnWin {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @map("updated_at")
  Win       Win       @relation(fields: [winId], references: [id], onDelete: Cascade)
  winId     Int       @map("win_id")
  Board     Board     @relation(fields: [BoardId], references: [id], onDelete: Cascade)
  BoardId   Int       @map("board_id")

  @@map("board_and_win")
}
